{"ast":null,"code":"import NetworkError from './NetworkError';\nconst SERVICE_TOKEN_NAME = 'serviceToken';\nlet networkErrorCallback;\nlet reauthenticationCallback;\n\nconst isJson = response => {\n  const contentType = response.headers.get(\"content-type\");\n  return contentType && contentType.indexOf(\"application/json\") !== -1;\n};\n\nconst handleOkResponse = (response, onSuccess) => {\n  if (!response.ok) {\n    return false;\n  }\n\n  if (!onSuccess) {\n    return true;\n  }\n\n  if (response.status === 204) {\n    onSuccess();\n    return true;\n  }\n\n  onSuccess(response);\n  return true;\n};\n\nconst handle4xxResponse = (response, onErrors) => {\n  if (response.status < 400 || response.status >= 500) {\n    return false;\n  }\n\n  if (response.status === 401 && reauthenticationCallback) {\n    reauthenticationCallback();\n    return true;\n  }\n\n  if (onErrors) {\n    onErrors(response);\n  }\n\n  return true;\n};\n\nconst handleResponse = (response, onSuccess, onErrors) => {\n  if (handleOkResponse(response, onSuccess)) {\n    return;\n  }\n\n  if (handle4xxResponse(response, onErrors)) {\n    return;\n  }\n\n  if (onErrors) {\n    onErrors(response);\n  }\n};\n\nexport const init = callback => networkErrorCallback = callback;\nexport const setReauthenticationCallback = callback => reauthenticationCallback = callback;\nexport const setServiceToken = serviceToken => sessionStorage.setItem(SERVICE_TOKEN_NAME, serviceToken);\nexport const getServiceToken = () => sessionStorage.getItem(SERVICE_TOKEN_NAME);\nexport const removeServiceToken = () => sessionStorage.removeItem(SERVICE_TOKEN_NAME);\nexport const config = (method, body) => {\n  const config = {};\n  config.method = method;\n\n  if (body) {\n    if (body instanceof FormData) {\n      config.body = body;\n    } else {\n      config.headers = {\n        'Content-Type': 'application/json'\n      };\n      config.body = JSON.stringify(body);\n    }\n  }\n\n  let serviceToken = getServiceToken();\n\n  if (serviceToken) {\n    if (config.headers) {\n      config.headers['Authorization'] = `Bearer ${serviceToken}`;\n    } else {\n      config.headers = {\n        'Authorization': `Bearer ${serviceToken}`\n      };\n    }\n  }\n\n  return config;\n};\nexport const appFetch = (path, options, onSuccess, onErrors) => fetch(`${process.env.REACT_APP_BACKEND_URL}${path}`, options).then(response => handleResponse(response, onSuccess, onErrors)).catch(() => {});","map":{"version":3,"sources":["C:/Users/ruzaf/Desktop/ws/elevator-app/src/backend/appFetch.js"],"names":["NetworkError","SERVICE_TOKEN_NAME","networkErrorCallback","reauthenticationCallback","isJson","response","contentType","headers","get","indexOf","handleOkResponse","onSuccess","ok","status","handle4xxResponse","onErrors","handleResponse","init","callback","setReauthenticationCallback","setServiceToken","serviceToken","sessionStorage","setItem","getServiceToken","getItem","removeServiceToken","removeItem","config","method","body","FormData","JSON","stringify","appFetch","path","options","fetch","process","env","REACT_APP_BACKEND_URL","then","catch"],"mappings":"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","sourcesContent":["import NetworkError from './NetworkError';\r\n\r\nconst SERVICE_TOKEN_NAME = 'serviceToken';\r\n\r\nlet networkErrorCallback;\r\nlet reauthenticationCallback;\r\n\r\nconst isJson = response => {\r\n\r\n    const contentType = response.headers.get(\"content-type\");\r\n\r\n    return contentType && contentType.indexOf(\"application/json\") !== -1;\r\n\r\n}\r\n\r\nconst handleOkResponse = (response, onSuccess) => {\r\n    if (!response.ok) {\r\n        return false;\r\n    }\r\n\r\n    if (!onSuccess) {\r\n\r\n        return true;\r\n    }\r\n    if (response.status === 204) {\r\n        onSuccess();\r\n        return true;\r\n    }\r\n\r\n    onSuccess(response);\r\n\r\n    return true;\r\n\r\n}\r\n\r\nconst handle4xxResponse = (response, onErrors) => {\r\n\r\n    if (response.status < 400 || response.status >= 500) {\r\n        return false;\r\n    }\r\n\r\n    if (response.status === 401 && reauthenticationCallback){\r\n        reauthenticationCallback();\r\n        return true;\r\n    }\r\n\r\n\r\n    if (onErrors) {\r\n        onErrors(response);\r\n    }\r\n\r\n    return true;\r\n\r\n}\r\n\r\nconst handleResponse = (response, onSuccess, onErrors) => {\r\n\r\n    if (handleOkResponse(response, onSuccess)) {\r\n        return;\r\n    }\r\n\r\n    if (handle4xxResponse(response, onErrors)) {\r\n        return;\r\n    }\r\n\r\n    if(onErrors) {\r\n        onErrors(response);\r\n    }\r\n    \r\n}\r\n\r\nexport const init = callback => networkErrorCallback = callback;\r\n\r\nexport const setReauthenticationCallback = callback => reauthenticationCallback = callback;\r\n\r\nexport const setServiceToken = serviceToken => \r\n    sessionStorage.setItem(SERVICE_TOKEN_NAME, serviceToken);\r\n\r\nexport const getServiceToken = () => sessionStorage.getItem(SERVICE_TOKEN_NAME);\r\n\r\nexport const removeServiceToken = () => \r\n    sessionStorage.removeItem(SERVICE_TOKEN_NAME);\r\n\r\nexport const config = (method, body) => {\r\n\r\n    const config = {};\r\n\r\n    config.method = method;\r\n\r\n    if (body) {\r\n        if (body instanceof FormData) {\r\n            config.body = body;\r\n        } else  {\r\n            config.headers = {'Content-Type': 'application/json'};\r\n            config.body = JSON.stringify(body);\r\n        }\r\n    }\r\n\r\n    let serviceToken = getServiceToken();\r\n\r\n    if (serviceToken) {\r\n\r\n        if (config.headers) {\r\n            config.headers['Authorization'] = `Bearer ${serviceToken}`;\r\n        } else {\r\n            config.headers = {'Authorization': `Bearer ${serviceToken}`};\r\n        }\r\n\r\n    }\r\n\r\n    return config;\r\n\r\n}\r\n\r\nexport const appFetch = (path, options, onSuccess, onErrors) =>\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${path}`, options)\r\n        .then(response => handleResponse(response, onSuccess, onErrors))\r\n        .catch(() => {});\r\n"]},"metadata":{},"sourceType":"module"}