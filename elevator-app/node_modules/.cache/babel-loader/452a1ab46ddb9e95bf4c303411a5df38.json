{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruzaf\\\\Desktop\\\\ws\\\\elevator-app\\\\src\\\\modules\\\\app\\\\components\\\\Password.js\",\n    _s = $RefreshSig$();\n\nimport { Alert, Button, FormControl, InputGroup } from 'react-bootstrap';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport Coming from './Coming';\nimport backend from '../../../backend';\nimport ErrorAlert from '../../utils/components/ErrorAlert';\nimport { FormattedMessage } from 'react-intl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Password = () => {\n  _s();\n\n  const {\n    id,\n    floor\n  } = useParams();\n  const [floors, setFloors] = useState(undefined);\n  const [notExists, setNotExists] = useState(false);\n  const [token, setToken] = useState();\n  const [pass, setPass] = useState();\n  const [coming, setComing] = useState(false);\n  const [invalidPass, setInvalidPass] = useState(false);\n  useEffect(() => {\n    backend.getFloors(id, r => {\n      setFloors(r);\n    }, e => {\n      setNotExists(true);\n    });\n  }, [id]);\n  return floors ? coming ? /*#__PURE__*/_jsxDEV(Coming, {\n    token: token,\n    floors: floors\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 31\n  }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"primary\",\n      children: \"Password:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        placeholder: \"password\",\n        pattern: \"\\\\d{4}\",\n        onChange: e => setPass(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-primary\",\n          onClick: _e => {\n            backend.getToken(id, pass, token => {\n              setToken(token);\n              backend.move(token, floor, r => {\n                console.log(r);\n                setComing(true);\n              }, e => setComing(true)); // TEA-POT\n            }, e => {\n              setInvalidPass(true);\n            });\n          },\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), invalidPass && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n      onClose: () => setInvalidPass(false),\n      heading: \"The code you introduced is incorrect.\",\n      text: \"Please introduce the right password of the elevator.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 73\n  }, this) : /*#__PURE__*/_jsxDEV(FormattedMessage, {\n    id: \"project.alerts.elevator.notExists\",\n    elevator: id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 17\n  }, this);\n};\n\n_s(Password, \"P3sbzGTG1nsKqtKMSocRz61DGWg=\", false, function () {\n  return [useParams];\n});\n\n_c = Password;\nexport default Password;\n\nvar _c;\n\n$RefreshReg$(_c, \"Password\");","map":{"version":3,"sources":["C:/Users/ruzaf/Desktop/ws/elevator-app/src/modules/app/components/Password.js"],"names":["Alert","Button","FormControl","InputGroup","React","useEffect","useState","useParams","Coming","backend","ErrorAlert","FormattedMessage","Password","id","floor","floors","setFloors","undefined","notExists","setNotExists","token","setToken","pass","setPass","coming","setComing","invalidPass","setInvalidPass","getFloors","r","e","target","value","_e","getToken","move","console","log"],"mappings":"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","sourcesContent":["import { Alert, Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport Coming from './Coming';\r\nimport backend from '../../../backend';\r\nimport ErrorAlert from '../../utils/components/ErrorAlert';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n\r\nconst Password = () => {\r\n    const {id, floor} = useParams();\r\n    const [floors, setFloors] = useState(undefined);\r\n    const [notExists, setNotExists] = useState(false);\r\n    const [token, setToken] = useState();\r\n    const [pass, setPass] = useState();\r\n    const [coming, setComing] = useState(false);\r\n    const [invalidPass, setInvalidPass] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        backend.getFloors(id, r => {setFloors(r);}, e => {setNotExists(true)});\r\n    }, [id]);\r\n\r\n    return floors ? (coming ? <Coming token={token} floors={floors}/> : <form>\r\n\r\n        <Alert variant=\"primary\">Password:</Alert>\r\n        <InputGroup>\r\n            <FormControl\r\n                placeholder=\"password\"\r\n                pattern=\"\\d{4}\"\r\n                onChange={e => setPass(e.target.value)}\r\n            />\r\n            <InputGroup.Append>\r\n                <Button variant=\"outline-primary\" onClick={_e => {\r\n                    backend.getToken(id, pass, (token) => {\r\n                        setToken(token);\r\n                        backend.move(token, floor, r => {\r\n                            console.log(r);\r\n                            setComing(true);\r\n                        }, e => setComing(true)); // TEA-POT\r\n                    }, e => {setInvalidPass(true)})\r\n                }}>submit</Button>\r\n            </InputGroup.Append>\r\n        </InputGroup>\r\n\r\n        {invalidPass && <ErrorAlert onClose={() => setInvalidPass(false)} heading={\"The code you introduced is incorrect.\"} text={\"Please introduce the right password of the elevator.\"} />}\r\n\r\n    </form>) :  <FormattedMessage id=\"project.alerts.elevator.notExists\" elevator={id} />\r\n};\r\n\r\nexport default Password;"]},"metadata":{},"sourceType":"module"}