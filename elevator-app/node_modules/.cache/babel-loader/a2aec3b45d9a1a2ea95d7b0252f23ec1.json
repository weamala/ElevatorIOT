{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruzaf\\\\Desktop\\\\ws\\\\elevator-app\\\\src\\\\modules\\\\app\\\\components\\\\Password.js\",\n    _s = $RefreshSig$();\n\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport Coming from './Coming';\nimport backend from '../../../backend';\nimport ErrorAlert from '../../utils/components/ErrorAlert';\nimport { FormattedMessage } from 'react-intl';\nimport Alert from '../../utils/components/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Password = () => {\n  _s();\n\n  const {\n    id,\n    floor\n  } = useParams();\n  const [floors, setFloors] = useState(undefined);\n  const [token, setToken] = useState();\n  const [pass, setPass] = useState();\n  const [coming, setComing] = useState(false);\n  const [invalidPass, setInvalidPass] = useState(false);\n  useEffect(() => {\n    backend.getFloors(id, setFloors);\n  }, [id]);\n  return floors ? coming ? /*#__PURE__*/_jsxDEV(Coming, {\n    token: token,\n    floors: floors\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 31\n  }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      heading: \"project.text.password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [/*#__PURE__*/_jsxDEV(FormattedMessage, {\n        id: \"project.placeholder.password\",\n        children: placeholder => /*#__PURE__*/_jsxDEV(FormControl, {\n          placeholder: placeholder,\n          pattern: \"\\\\d{4}\",\n          onChange: e => setPass(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup.Append, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-primary\",\n          onClick: _e => {\n            backend.getToken(id, pass, token => {\n              setToken(token);\n              backend.move(token, floor, r => {\n                console.log(r);\n                setComing(true);\n              }, e => setComing(true)); // TEA-POT\n            }, e => {\n              setInvalidPass(true);\n            });\n          },\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), invalidPass && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n      heading: \"project.alerts.password.incorrect.header\",\n      text: \"project.alerts.password.incorrect.body\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 73\n  }, this) : /*#__PURE__*/_jsxDEV(ErrorAlert, {\n    heading: \"project.alerts.elevator.notExists\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 17\n  }, this);\n};\n\n_s(Password, \"ibctBnyrm98+nkSjNmAKgHEaWOc=\", false, function () {\n  return [useParams];\n});\n\n_c = Password;\nexport default Password;\n\nvar _c;\n\n$RefreshReg$(_c, \"Password\");","map":{"version":3,"sources":["C:/Users/ruzaf/Desktop/ws/elevator-app/src/modules/app/components/Password.js"],"names":["Button","FormControl","InputGroup","React","useEffect","useState","useParams","Coming","backend","ErrorAlert","FormattedMessage","Alert","Password","id","floor","floors","setFloors","undefined","token","setToken","pass","setPass","coming","setComing","invalidPass","setInvalidPass","getFloors","placeholder","e","target","value","_e","getToken","move","r","console","log"],"mappings":"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","sourcesContent":["import { Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport Coming from './Coming';\r\nimport backend from '../../../backend';\r\nimport ErrorAlert from '../../utils/components/ErrorAlert';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Alert from '../../utils/components/Alert';\r\n\r\n\r\nconst Password = () => {\r\n    const {id, floor} = useParams();\r\n    const [floors, setFloors] = useState(undefined);\r\n    const [token, setToken] = useState();\r\n    const [pass, setPass] = useState();\r\n    const [coming, setComing] = useState(false);\r\n    const [invalidPass, setInvalidPass] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        backend.getFloors(id,setFloors);\r\n    }, [id]);\r\n\r\n    return floors ? (coming ? <Coming token={token} floors={floors}/> : <form>\r\n\r\n        <Alert heading=\"project.text.password\"/>\r\n\r\n        <InputGroup>\r\n        <FormattedMessage id=\"project.placeholder.password\">{placeholder =>\r\n                <FormControl\r\n                placeholder={placeholder}\r\n                pattern=\"\\d{4}\"\r\n                onChange={e => setPass(e.target.value)}\r\n            />\r\n        }</FormattedMessage>\r\n\r\n            <InputGroup.Append>\r\n                <Button variant=\"outline-primary\" onClick={_e => {\r\n                    backend.getToken(id, pass, (token) => {\r\n                        setToken(token);\r\n                        backend.move(token, floor, r => {\r\n                            console.log(r);\r\n                            setComing(true);\r\n                        }, e => setComing(true)); // TEA-POT\r\n                    }, e => {setInvalidPass(true)})\r\n                }}>submit</Button>\r\n            </InputGroup.Append>\r\n        </InputGroup>\r\n\r\n        {invalidPass && <ErrorAlert heading=\"project.alerts.password.incorrect.header\" text=\"project.alerts.password.incorrect.body\"/>}\r\n\r\n    </form>) :  <ErrorAlert heading=\"project.alerts.elevator.notExists\"/>\r\n};\r\n\r\nexport default Password;"]},"metadata":{},"sourceType":"module"}